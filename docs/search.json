[{"path":"https://joe-chelladurai.github.io/uxr/articles/compare_benchmarks.html","id":"compare-event-with-a-benchmark","dir":"Articles","previous_headings":"","what":"Compare Event with a Benchmark","title":"Compare with Benchmarks","text":"Note: function yet released. need install development version use function. install developmental version enter console: remotes::install_github(\"joe-chelladurai/uxr\"). event “thing happens” (Oxford Learner’s Dictionary). Example: 10 14 people successfully completed task interface. probability success benchmark 80%? can use compare_benchmark_event() function answer question. function requires benchmark value, number events (case successful events), total number events. pass benchmark value 80%, ’ll need specify 0.8. event total arguments take numeric values 1 . function calculates success rates returns cumulative probability value benchmark. probability value indicates success rate use interface potential users, given representative sample.","code":"library(uxr) data <- data.frame(task = c(\"pass\", \"pass\", \"pass\", \"pass\", \"pass\",                             \"fail\", \"pass\", \"pass\", \"pass\", \"fail\",                             \"pass\", \"pass\"))  benchmark_event(data,                 column = task,                 benchmark = 0.80,                 event = \"pass\") ── Compare Event Rate with a Benchmark ───────────────────────────────────────────────────────────────── Based on the event rate of 84%, the probability that this rate exceeds a benchmark of 80% is 44%   term             result     count                10     total                12     benchmark           0.8     result        0.4416543     probability       0.442"},{"path":"https://joe-chelladurai.github.io/uxr/articles/compare_benchmarks.html","id":"compare-time-with-a-benchmark","dir":"Articles","previous_headings":"","what":"Compare Time with a Benchmark","title":"Compare with Benchmarks","text":"Note: function yet released. need install development version use function. install developmental version enter console: remotes::install_github(\"joe-chelladurai/uxr\"). Example: 7 people successfully took 60, 53, 70, 42, 62, 43, 81 seconds complete task. probability time taken complete task time 60 seconds? can use compare_benchmark_time() function answer question. function requires benchmark value list times. pass benchmark value 60s, can specify 60.","code":"data <- data.frame(time = c(60, 53, 70, 42, 62, 43, 81)) benchmark_time(data, column = time, benchmark = 60, alpha = 0.05) -- Compare Time with a Benchmark ------------------------------------------------------------   term          t.result.     lower_ci           45.8     upper_ci           71.7     t                 0.509     probability       0.314"},{"path":"https://joe-chelladurai.github.io/uxr/articles/compare_benchmarks.html","id":"compare-score-with-a-benchmark","dir":"Articles","previous_headings":"","what":"Compare Score with a Benchmark","title":"Compare with Benchmarks","text":"Note: function yet released. need install development version use function. install developmental version enter console: remotes::install_github(\"joe-chelladurai/uxr\").","code":"data <- 68 + 17 * scale(rnorm(20)) # 68 = mean, 17 = sd benchmark_score(data, benchmark = 60, alpha = 0.5) ── Compare Score with a Benchmark ────────────────────────────────────────────────────────────── We can be 98% confident that the true score is between 60 and 76   term                result     mean                    68     sd                      17     se                3.801316     n                       20     df                      19     alpha                  0.5     probability          0.024     tail                   one     confidence           0.976     margin_of_error          8     t                    2.105     lower_ci                60     upper_ci                76"},{"path":"https://joe-chelladurai.github.io/uxr/articles/compare_means.html","id":"compare-means-within-groups","dir":"Articles","previous_headings":"","what":"Compare Means Within Groups","title":"Compare Means","text":"uses paired t-test.","code":"# Example data data <- data.frame(id = c(1:7),            task1 = c(4, 1, 2, 3, 8, 4, 4),            task2 = c(7, 13, 9, 7, 18, 8, 10))  data    id task1 task2 1  1     4     7 2  2     1    13 3  3     2     9 4  4     3     7 5  5     8    18 6  6     4     8 7  7     4    10 compare_means_within_groups(data$task1, data$task2) ── Compare Means Within Groups ────────────────────────────────────────────────────────────────────   X.                result.estimate     mean.difference         -6.571429     t                           -5.18     p                           0.002     df                              6     ci_level                     0.95     lower_ci                    -9.68     upper_ci                    -3.46"},{"path":[]},{"path":"https://joe-chelladurai.github.io/uxr/articles/compare_means.html","id":"welsch-test","dir":"Articles","previous_headings":"Compare Means Between Groups","what":"Welsch Test","title":"Compare Means","text":"","code":"data <- tibble::tribble(~old, ~new,                 18, 12,                 44, 35,                  35, 21,                 78, 9,                 38, 2,                  18, 10,                 16, 5,                 22, 38,                 40, 30,                 77, NA,                 20, NA)  data2 <- data |>    tidyr::pivot_longer(cols = everything(), names_to = \"group\", values_to = \"value\") compare_means_between_groups(data2, value, group, c(\"old\", \"new\"), equal_variances = FALSE) ── Welch Two Sample t-test ─────────────────────────────────────────────────────────────────────────────────   X.                  result.estimate     mean.in.group.new                18     mean.in.group.old          36.90909     t                             -2.33     p                             0.033     df                          16.7007     ci_level                       0.95     lower_ci                     -36.04     upper_ci                      -1.78"},{"path":"https://joe-chelladurai.github.io/uxr/articles/compare_rates.html","id":"compare-rates-between-groups","dir":"Articles","previous_headings":"","what":"Compare Rates Between Groups","title":"Compare Rates","text":"","code":"design = c(\"A\",\"B\") complete = c(37, 22) incomplete = c(418, 416) data <- data.frame(design, complete, incomplete) data <- data |> tidyr::pivot_longer(!design, names_to = \"rate\", values_to = \"n\") |>  tidyr::uncount(n) compare_rates_between_groups(data, design, rate) #>  #> ── Compare Rates Between Groups ──────────────────────────────────────────────── #> → N-1 Two Proportions test #>   term          value   #>   a            0.0311   #>   b             0.999   #>   c            0.0617   #>   d           0.00448   #>   den          0.0166   #>   num          0.0311   #>   z              1.87   #>   p_value      0.0617   #>   n               893   #>   lower_ci   -0.00186   #>   upper_ci     0.0636"},{"path":"https://joe-chelladurai.github.io/uxr/articles/compare_rates.html","id":"compare-rates-within-groups","dir":"Articles","previous_headings":"","what":"Compare Rates Within Groups","title":"Compare Rates","text":"","code":"A <- c(1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1) B <- c(0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0)  data <- data.frame(A, B) compare_rates_within_groups(data, A, B, input = \"wide\") #>  #> ── Compare Rates Within Groups ───────────────────────────────────────────────── #> → McNemar's Test #>   p_value   lower_ci   upper_ci   #>   0.125     0.000569   0.59"},{"path":"https://joe-chelladurai.github.io/uxr/articles/examples.html","id":"compare-probability-of-an-event-with-benchmark","dir":"Articles","previous_headings":"","what":"Compare Probability of an Event with Benchmark","title":"examples","text":"","code":"data <- data.frame(task_1 = c(\"y\", \"y\", \"y\", \"y\", \"n\", \"n\", \"n\", NA, NA, NA, NA, NA, NA, NA),                     task_2 = c(0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1))  ## with dataframe column  benchmark_event(data,                  column = task_1,                  benchmark = 0.8,                  event = \"y\") #>  #> ── Compare Event Rate with a Benchmark ───────────────────────────────────────── #> Based on the event rate of 58%, the probability that this rate exceeds a #> benchmark of 80% is 3% #>   term            result   #>   count                4   #>   total                7   #>   benchmark          0.8   #>   result        0.033344   #>   probability      0.033 benchmark_event(data,                  column = task_2,                  benchmark = 0.3,                  event = 1,                  event_type = \"success\") #>  #> ── Compare Event Rate with a Benchmark ───────────────────────────────────────── #> Based on the success rate of 42%, the probability that this rate exceeds a #> benchmark of 30% is 78% #>   term             result   #>   count                 6   #>   total                14   #>   benchmark           0.3   #>   result        0.7805158   #>   probability       0.781 ## pipeable data |>    benchmark_event(column = task_2,                    benchmark = 0.3,                    event = 1,                    event_type = \"success\") #>  #> ── Compare Event Rate with a Benchmark ───────────────────────────────────────── #> Based on the success rate of 42%, the probability that this rate exceeds a #> benchmark of 30% is 78% #>   term             result   #>   count                 6   #>   total                14   #>   benchmark           0.3   #>   result        0.7805158   #>   probability       0.781 # specify `input = \"values` to use with direct values benchmark_event(benchmark = 0.8,                  count = 4,                  total = 7,                  input = \"values\") #>  #> ── Compare Event Rate with a Benchmark ───────────────────────────────────────── #> Based on the event rate of 58%, the probability that this rate exceeds a #> benchmark of 80% is 3% #>   term            result   #>   count                4   #>   total                7   #>   benchmark          0.8   #>   result        0.033344   #>   probability      0.033"},{"path":"https://joe-chelladurai.github.io/uxr/articles/examples.html","id":"compare-score-with-a-benchmark","dir":"Articles","previous_headings":"","what":"Compare Score with a Benchmark","title":"examples","text":"","code":"scores <- 80 + 23 * scale(rnorm(172)) # 80 = mean, 23 = sd data <- data.frame(scores = scores) # with dataframe column benchmark_score(data, scores, 67) #>  #> ── Compare Score with a Benchmark ────────────────────────────────────────────── #> We can be 100% confident that the true score is between 67 and 93 #>   term                    result   #>   mean                        80   #>   sd                          23   #>   se                    1.753734   #>   n                          172   #>   df                         171   #>   probability       2.732705e-12   #>   tail                       one   #>   confidence                   1   #>   margin_of_error             13   #>   t                     7.412757   #>   lower_ci                    67   #>   upper_ci                    93 # pipeable data |> benchmark_score(scores, 67) #>  #> ── Compare Score with a Benchmark ────────────────────────────────────────────── #> We can be 100% confident that the true score is between 67 and 93 #>   term                    result   #>   mean                        80   #>   sd                          23   #>   se                    1.753734   #>   n                          172   #>   df                         171   #>   probability       2.732705e-12   #>   tail                       one   #>   confidence                   1   #>   margin_of_error             13   #>   t                     7.412757   #>   lower_ci                    67   #>   upper_ci                    93 # specify `input = \"values` to use with direct values benchmark_score(mean = 80,                  sd = 23,                  n = 172,                  benchmark = 67,                  input = \"values\") #>  #> ── Compare Score with a Benchmark ────────────────────────────────────────────── #> We can be 100% confident that the true score is between 67 and 93 #>   term                    result   #>   mean                        80   #>   sd                          23   #>   se                    1.753734   #>   n                          172   #>   df                         171   #>   probability       2.732705e-12   #>   tail                       one   #>   confidence                   1   #>   margin_of_error             13   #>   t                     7.412757   #>   lower_ci                    67   #>   upper_ci                    93"},{"path":"https://joe-chelladurai.github.io/uxr/articles/examples.html","id":"compare-time-with-a-benchmark","dir":"Articles","previous_headings":"","what":"Compare Time with a Benchmark","title":"examples","text":"","code":"data <- data.frame(time = c(60, 53, 70, 42, 62, 43, 81)) benchmark_time(data, column = time, benchmark = 60, alpha = 0.05) #>  #> ── Compare Time with a Benchmark ─────────────────────────────────────────────── #>   term          t.result_table.   #>   lower_ci                 45.8   #>   upper_ci                 71.7   #>   t                       0.509   #>   probability             0.314"},{"path":"https://joe-chelladurai.github.io/uxr/articles/examples.html","id":"compare-means-between-groups","dir":"Articles","previous_headings":"","what":"Compare Means Between Groups","title":"examples","text":"","code":"# Wide data - default  data_wide <- data.frame(A = c(4, 2, 5, 3, 6, 2, 5),                         B = c(5, 2, 1, 2, 1, 3, 2))  compare_means_between_groups(data_wide, var1 = A, var2 = B) #>  #> ── Welch Two Sample t-test ───────────────────────────────────────────────────── #>   term          value   #>   mean_of_A      3.86   #>   mean_of_B      2.29   #>   t              1.99   #>   df             11.8   #>   p_value      0.0707   #>   ci_level       0.95   #>   lower_ci     -0.156   #>   upper_ci        3.3 # Long data  data_long <- data_wide |> tibble::rowid_to_column(\"id\") |>   tidyr::pivot_longer(cols = -id, names_to = \"group\", values_to = \"variable\")  compare_means_between_groups(data_long,                               variable = variable,                              grouping_variable = group,                               groups = c(\"A\", \"B\"),                               input = \"long\") #>  #> ── Welch Two Sample t-test ───────────────────────────────────────────────────── #>   term          value   #>   mean_of_A      3.86   #>   mean_of_B      2.29   #>   t              1.99   #>   df             11.8   #>   p_value      0.0707   #>   ci_level       0.95   #>   lower_ci     -0.156   #>   upper_ci        3.3"},{"path":"https://joe-chelladurai.github.io/uxr/articles/examples.html","id":"compare-means-within-groups","dir":"Articles","previous_headings":"","what":"Compare Means Within Groups","title":"examples","text":"","code":"data <- data.frame(id = c(1:7), task1 = c(4, 1, 2, 3, 8, 4, 4), task2 = c(7, 13, 9, 7, 18, 8, 10)) compare_means_within_groups(data, task1, task2) #>  #> ── Compare Means Within Groups ───────────────────────────────────────────────── #>   X.                result.estimate   #>   mean.difference         -6.571429   #>   t                           -5.18   #>   p                           0.002   #>   df                              6   #>   ci_level                     0.95   #>   lower_ci                    -9.68   #>   upper_ci                    -3.46 id <- c(1:7) task1 <- c(4, 1, 2, 3, 8, 4, 4) task2 <- c(7, 13, 9, 7, 18, 8, 10)  data <- tibble::as_tibble(data.frame(id, task1, task2))  compare_means_within_groups(data, task1, task2) #>  #> ── Compare Means Within Groups ───────────────────────────────────────────────── #>   X.                result.estimate   #>   mean.difference         -6.571429   #>   t                           -5.18   #>   p                           0.002   #>   df                              6   #>   ci_level                     0.95   #>   lower_ci                    -9.68   #>   upper_ci                    -3.46"},{"path":"https://joe-chelladurai.github.io/uxr/articles/examples.html","id":"compare-rates-between-groups","dir":"Articles","previous_headings":"","what":"Compare Rates Between Groups","title":"examples","text":"","code":"design = c(\"A\",\"B\") complete = c(37, 22) incomplete = c(418, 416) data <- data.frame(design, complete, incomplete) data <- data |> tidyr::pivot_longer(!design, names_to = \"rate\", values_to = \"n\") |>   tidyr::uncount(n)  compare_rates_between_groups(data, group = design, event = rate) #>  #> ── Compare Rates Between Groups ──────────────────────────────────────────────── #> → N-1 Two Proportions test #>   term          value   #>   a            0.0311   #>   b             0.999   #>   c            0.0617   #>   d           0.00448   #>   den          0.0166   #>   num          0.0311   #>   z              1.87   #>   p_value      0.0617   #>   n               893   #>   lower_ci   -0.00186   #>   upper_ci     0.0636"},{"path":"https://joe-chelladurai.github.io/uxr/articles/examples.html","id":"compare-rates-within-groups","dir":"Articles","previous_headings":"","what":"Compare Rates Within Groups","title":"examples","text":"","code":"A <- c(1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1) B <- c(0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0) data <- data.frame(A, B)  compare_rates_within_groups(data, A, B, input = \"wide\") #>  #> ── Compare Rates Within Groups ───────────────────────────────────────────────── #> → McNemar's Test #>   p_value   lower_ci   upper_ci   #>   0.125     0.000569   0.59"},{"path":"https://joe-chelladurai.github.io/uxr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joe Chelladurai. Author, maintainer.","code":""},{"path":"https://joe-chelladurai.github.io/uxr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chelladurai J (2022). uxr: User Experience Research. R package version 0.1.2.","code":"@Manual{,   title = {uxr: User Experience Research},   author = {Joe Chelladurai},   year = {2022},   note = {R package version 0.1.2}, }"},{"path":"https://joe-chelladurai.github.io/uxr/index.html","id":"quantitative-user-experience-ux-research-in-r","dir":"","previous_headings":"","what":"User Experience Research","title":"User Experience Research","text":"purpose package provide convenience functions user experience research. Particularly, package focuses quantitative user experience testing reporting.","code":""},{"path":"https://joe-chelladurai.github.io/uxr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"User Experience Research","text":"Please note package early development breaking changes. can install package directly CRAN using: install development version, use:","code":"install.packages(\"uxr\") remotes::install_github(\"joe-chelladurai/uxr\")"},{"path":"https://joe-chelladurai.github.io/uxr/index.html","id":"available-functions","dir":"","previous_headings":"","what":"Available functions","title":"User Experience Research","text":"Published CRAN adjusted_wald_ci wald test benchmark_comparison task_completion mean_ci mean_ci_2 Development Version benchmark_event benchmark_time benchmark_score get_concordant_discordant_pairs test_t test_t_paired test_mcnemar test_fisher test_n_1_prop test_wald test_wald_adj compare_means_within_groups - two-sample t-test (Welsh/Student) compare_means_between_groups - paired t-test compare_rates_within_groups - mcnemar exact test compare_rates_between_groups - n-1 two proportion test","code":""},{"path":"https://joe-chelladurai.github.io/uxr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 uxr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/benchmark_event.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Probability of an Event with Benchmark — benchmark_event","title":"Compare Probability of an Event with Benchmark — benchmark_event","text":"Compare Probability Event Benchmark","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/benchmark_event.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Probability of an Event with Benchmark — benchmark_event","text":"","code":"benchmark_event(   data,   column,   benchmark,   event,   count,   total,   event_type = \"\",   remove_missing = TRUE,   notes = \"minimal\",   input = \"long\",   output = \"console\" )"},{"path":"https://joe-chelladurai.github.io/uxr/reference/benchmark_event.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Probability of an Event with Benchmark — benchmark_event","text":"data dataset column name column benchmark benchmark event specify event given column (example: 0, \"pass\", \"success\") count number times event occurred. Use using input = \"values\" total total number events. Use using input = \"values\" event_type Optional: string describing type event. example, success, failure, etc. remove_missing TRUE/FALSE (Default TRUE) notes whether output contain minimal technical type notes. Defaults \"minimal\". Use \"none\" turn . input Default: \"long\" - long form data, \"values\" pass values directly. using option, must specify count total. output Default: \"console\" - prints output console returns tibble invisibly.","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/benchmark_event.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Probability of an Event with Benchmark — benchmark_event","text":"Dataframe results saved object. Show console output default","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/benchmark_event.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Probability of an Event with Benchmark — benchmark_event","text":"","code":"data <- data.frame(task_1 = c(\"y\", \"y\", \"y\", \"y\", \"n\", \"n\", \"n\", NA, NA, NA, NA, NA, NA, NA),                    task_2 = c(0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1)) # With dataframe columns  benchmark_event(data, column = task_1, benchmark = 0.8, event = \"y\") #>  #> ── Compare Event Rate with a Benchmark ───────────────────────────────────────── #> Based on the event rate of 58%, the probability that this rate exceeds a #> benchmark of 80% is 3% #>   term            result   #>   count                4   #>   total                7   #>   benchmark          0.8   #>   result        0.033344   #>   probability      0.033   benchmark_event(data, column = task_2, benchmark = 0.3, event = 1, event_type = \"success\") #>  #> ── Compare Event Rate with a Benchmark ───────────────────────────────────────── #> Based on the success rate of 42%, the probability that this rate exceeds a #> benchmark of 30% is 78% #>   term             result   #>   count                 6   #>   total                14   #>   benchmark           0.3   #>   result        0.7805158   #>   probability       0.781    # Also pipeable data |>   benchmark_event(column = task_2, benchmark = 0.3, event = 1, event_type = \"success\") #>  #> ── Compare Event Rate with a Benchmark ───────────────────────────────────────── #> Based on the success rate of 42%, the probability that this rate exceeds a #> benchmark of 30% is 78% #>   term             result   #>   count                 6   #>   total                14   #>   benchmark           0.3   #>   result        0.7805158   #>   probability       0.781    # With direct values benchmark_event(benchmark = 0.8, count = 4, total = 7, input = \"values\") #>  #> ── Compare Event Rate with a Benchmark ───────────────────────────────────────── #> Based on the event rate of 58%, the probability that this rate exceeds a #> benchmark of 80% is 3% #>   term            result   #>   count                4   #>   total                7   #>   benchmark          0.8   #>   result        0.033344   #>   probability      0.033"},{"path":"https://joe-chelladurai.github.io/uxr/reference/benchmark_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Score with a Benchmark — benchmark_score","title":"Compare Score with a Benchmark — benchmark_score","text":"Compare Score Benchmark","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/benchmark_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Score with a Benchmark — benchmark_score","text":"","code":"benchmark_score(   data,   column,   benchmark,   mean,   sd,   n,   tail = \"one\",   remove_missing = TRUE,   input = \"long\",   output = \"console\" )"},{"path":"https://joe-chelladurai.github.io/uxr/reference/benchmark_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Score with a Benchmark — benchmark_score","text":"data dataframe column column scores dataframe benchmark benchmark mean input = \"values\", enter mean value sd input = \"values\", enter standard deviation value n input = \"values\", enter total number scores tail one-tailed two-tailed test remove_missing TRUE/FALSE (Default TRUE) input Default: \"long\" - long form data, \"values\" pass values directly. using option, must specify mean, sd, n. output Default: \"console\" - prints output console returns tibble invisibly.","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/benchmark_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Score with a Benchmark — benchmark_score","text":"dataframe results saved object. show console output default","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/benchmark_score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Score with a Benchmark — benchmark_score","text":"","code":"scores <- 80 + 23 * scale(rnorm(172)) # 80 = mean, 23 = sd data <- data.frame(scores = scores) benchmark_score(data, scores, 67) #>  #> ── Compare Score with a Benchmark ────────────────────────────────────────────── #> We can be 100% confident that the true score is between 67 and 93 #>   term                    result   #>   mean                        80   #>   sd                          23   #>   se                    1.753734   #>   n                          172   #>   df                         171   #>   probability       2.732705e-12   #>   tail                       one   #>   confidence                   1   #>   margin_of_error             13   #>   t                     7.412757   #>   lower_ci                    67   #>   upper_ci                    93   data |> benchmark_score(scores, 67) #>  #> ── Compare Score with a Benchmark ────────────────────────────────────────────── #> We can be 100% confident that the true score is between 67 and 93 #>   term                    result   #>   mean                        80   #>   sd                          23   #>   se                    1.753734   #>   n                          172   #>   df                         171   #>   probability       2.732705e-12   #>   tail                       one   #>   confidence                   1   #>   margin_of_error             13   #>   t                     7.412757   #>   lower_ci                    67   #>   upper_ci                    93   benchmark_score(mean = 80, sd = 23, n = 172, benchmark = 67, input = \"values\") #>  #> ── Compare Score with a Benchmark ────────────────────────────────────────────── #> We can be 100% confident that the true score is between 67 and 93 #>   term                    result   #>   mean                        80   #>   sd                          23   #>   se                    1.753734   #>   n                          172   #>   df                         171   #>   probability       2.732705e-12   #>   tail                       one   #>   confidence                   1   #>   margin_of_error             13   #>   t                     7.412757   #>   lower_ci                    67   #>   upper_ci                    93"},{"path":"https://joe-chelladurai.github.io/uxr/reference/benchmark_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Time with a Benchmark — benchmark_time","title":"Compare Time with a Benchmark — benchmark_time","text":"Compare Time Benchmark","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/benchmark_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Time with a Benchmark — benchmark_time","text":"","code":"benchmark_time(   data,   column,   benchmark,   alpha,   remove_missing = FALSE,   input = \"long\",   output = \"console\" )"},{"path":"https://joe-chelladurai.github.io/uxr/reference/benchmark_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Time with a Benchmark — benchmark_time","text":"data dataframe column column vector time values benchmark benchmark alpha alpha remove_missing TRUE/FALSE (Default TRUE) input Default: \"long\" - long form data, \"values\" pass values directly. using option, must specify count total. output Default: \"console\" - prints output console returns tibble invisibly.","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/benchmark_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Time with a Benchmark — benchmark_time","text":"lower_ci, upper_ci, t, probability","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/benchmark_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Time with a Benchmark — benchmark_time","text":"","code":"data <- data.frame(time = c(60, 53, 70, 42, 62, 43, 81)) benchmark_time(data, column = time, benchmark = 60, alpha = 0.05) #>  #> ── Compare Time with a Benchmark ─────────────────────────────────────────────── #>   term          t.result_table.   #>   lower_ci                 45.8   #>   upper_ci                 71.7   #>   t                       0.509   #>   probability             0.314"},{"path":"https://joe-chelladurai.github.io/uxr/reference/compare_means_between_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Means Between Groups — compare_means_between_groups","title":"Compare Means Between Groups — compare_means_between_groups","text":"Compare Means Groups","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/compare_means_between_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Means Between Groups — compare_means_between_groups","text":"","code":"compare_means_between_groups(   data,   var1,   var2,   variable,   grouping_variable,   groups,   test = \"Welch\",   input = \"wide\",   output = \"console\" )"},{"path":"https://joe-chelladurai.github.io/uxr/reference/compare_means_between_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Means Between Groups — compare_means_between_groups","text":"data data var1 variable 1 var2 variable 2 variable variable grouping_variable Group groups Specify groups grouping variable test Default: \"Welch\", choose \"student\" \"Welch\" input Default: \"wide\", choose \"long\" \"wide\". \"wide\" requires data var1 var2. \"long\" requires data, variable, grouping_variable groups output Default: \"console\" - prints output console returns tibble invisibly.","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/compare_means_between_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Means Between Groups — compare_means_between_groups","text":"results","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/compare_means_between_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Means Between Groups — compare_means_between_groups","text":"","code":"# Wide data - default data_wide <- data.frame(A = c(4, 2, 5, 3, 6, 2, 5),                         B = c(5, 2, 1, 2, 1, 3, 2))  compare_means_between_groups(data_wide, var1 = A, var2 = B) #>  #> ── Welch Two Sample t-test ───────────────────────────────────────────────────── #>   term          value   #>   mean_of_A      3.86   #>   mean_of_B      2.29   #>   t              1.99   #>   df             11.8   #>   p_value      0.0707   #>   ci_level       0.95   #>   lower_ci     -0.156   #>   upper_ci        3.3    # Long data data_long <- data_wide |> tibble::rowid_to_column(\"id\") |>   tidyr::pivot_longer(cols = -id, names_to = \"group\", values_to = \"variable\")  compare_means_between_groups(data_long, variable = variable,                              grouping_variable = group, groups = c(\"A\", \"B\"), input = \"long\") #>  #> ── Welch Two Sample t-test ───────────────────────────────────────────────────── #>   term          value   #>   mean_of_A      3.86   #>   mean_of_B      2.29   #>   t              1.99   #>   df             11.8   #>   p_value      0.0707   #>   ci_level       0.95   #>   lower_ci     -0.156   #>   upper_ci        3.3"},{"path":"https://joe-chelladurai.github.io/uxr/reference/compare_means_within_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Means Within Groups — compare_means_within_groups","title":"Compare Means Within Groups — compare_means_within_groups","text":"Compare Means Within Groups","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/compare_means_within_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Means Within Groups — compare_means_within_groups","text":"","code":"compare_means_within_groups(   data,   var1,   var2,   input = \"wide\",   output = \"console\" )"},{"path":"https://joe-chelladurai.github.io/uxr/reference/compare_means_within_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Means Within Groups — compare_means_within_groups","text":"data dataframe var1 variable 1 var2 variable 2 input Default: \"long\" - long form data, \"values\" pass values directly. using option, must specify mean, sd, n. output Default: \"console\" - prints output console returns tibble invisibly.","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/compare_means_within_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Means Within Groups — compare_means_within_groups","text":"results","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/compare_means_within_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Means Within Groups — compare_means_within_groups","text":"","code":"data <- data.frame(id = c(1:7),   task1 = c(4, 1, 2, 3, 8, 4, 4),   task2 = c(7, 13, 9, 7, 18, 8, 10)) compare_means_within_groups(data, task1, task2) #>  #> ── Compare Means Within Groups ───────────────────────────────────────────────── #>   X.                result.estimate   #>   mean.difference         -6.571429   #>   t                           -5.18   #>   p                           0.002   #>   df                              6   #>   ci_level                     0.95   #>   lower_ci                    -9.68   #>   upper_ci                    -3.46"},{"path":"https://joe-chelladurai.github.io/uxr/reference/compare_rates_between_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Rates Between Groups — compare_rates_between_groups","title":"Compare Rates Between Groups — compare_rates_between_groups","text":"Compare Rates Groups","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/compare_rates_between_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Rates Between Groups — compare_rates_between_groups","text":"","code":"compare_rates_between_groups(   data,   group,   event,   test,   input = \"long\",   output = \"console\" )"},{"path":"https://joe-chelladurai.github.io/uxr/reference/compare_rates_between_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Rates Between Groups — compare_rates_between_groups","text":"data data group column dataframe : group event column dataframe : event test Type test (fisher, n-1 two prop) input Defaults \"long\" output \"console\" prints output console; \"tibble\" returns tibble","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/compare_rates_between_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Rates Between Groups — compare_rates_between_groups","text":"results","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/compare_rates_between_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Rates Between Groups — compare_rates_between_groups","text":"","code":"design = c(\"A\",\"B\") complete = c(37, 22) incomplete = c(418, 416) data <- data.frame(design, complete, incomplete) data <- data |> tidyr::pivot_longer(!design, names_to = \"rate\", values_to = \"n\") |>   tidyr::uncount(n) compare_rates_between_groups(data, group = design, event = rate) #>  #> ── Compare Rates Between Groups ──────────────────────────────────────────────── #> → N-1 Two Proportions test #>   term          value   #>   a            0.0311   #>   b             0.999   #>   c            0.0617   #>   d           0.00448   #>   den          0.0166   #>   num          0.0311   #>   z              1.87   #>   p_value      0.0617   #>   n               893   #>   lower_ci   -0.00186   #>   upper_ci     0.0636"},{"path":"https://joe-chelladurai.github.io/uxr/reference/compare_rates_within_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Rates Within Groups — compare_rates_within_groups","title":"Compare Rates Within Groups — compare_rates_within_groups","text":"Compare Rates Within Groups","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/compare_rates_within_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Rates Within Groups — compare_rates_within_groups","text":"","code":"compare_rates_within_groups(   data,   x,   y,   conf_level = 0.95,   input,   output = \"console\" )"},{"path":"https://joe-chelladurai.github.io/uxr/reference/compare_rates_within_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Rates Within Groups — compare_rates_within_groups","text":"data data x var 1 y var 2 conf_level Confidence level input input type currently accepts \"wide\" output Default \"console\", also accepts \"tibble\"","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/compare_rates_within_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Rates Within Groups — compare_rates_within_groups","text":"results","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/compare_rates_within_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Rates Within Groups — compare_rates_within_groups","text":"","code":"A <- c(1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1) B <- c(0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0) data <- data.frame(A, B) compare_rates_within_groups(data, A, B, input = \"wide\") #>  #> ── Compare Rates Within Groups ───────────────────────────────────────────────── #> → McNemar's Test #>   p_value   lower_ci   upper_ci   #>   0.125     0.000569   0.59"},{"path":"https://joe-chelladurai.github.io/uxr/reference/dist_t.html","id":null,"dir":"Reference","previous_headings":"","what":"T Distribution — dist_t","title":"T Distribution — dist_t","text":"T Distribution","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/dist_t.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"T Distribution — dist_t","text":"","code":"dist_t(t, df, tail)"},{"path":"https://joe-chelladurai.github.io/uxr/reference/dist_t.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"T Distribution — dist_t","text":"t t df degrees freedom tail 'one' 'two'","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/dist_t.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"T Distribution — dist_t","text":"value","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/dist_t.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"T Distribution — dist_t","text":"","code":"dist_t(1.4, 2, \"one\") #> [1] 0.1482368 dist_t(1.4, 2, \"two\") #> [1] 0.2964735"},{"path":"https://joe-chelladurai.github.io/uxr/reference/get_concordant_discordant_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get concordant and discordant pairs for two variables — get_concordant_discordant_pairs","title":"Get concordant and discordant pairs for two variables — get_concordant_discordant_pairs","text":"Get concordant discordant pairs two variables","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/get_concordant_discordant_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get concordant and discordant pairs for two variables — get_concordant_discordant_pairs","text":"","code":"get_concordant_discordant_pairs(data, x, y)"},{"path":"https://joe-chelladurai.github.io/uxr/reference/get_concordant_discordant_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get concordant and discordant pairs for two variables — get_concordant_discordant_pairs","text":"data = data x variable 1 y variable 2","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/get_concordant_discordant_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get concordant and discordant pairs for two variables — get_concordant_discordant_pairs","text":"data frame","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/get_concordant_discordant_pairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get concordant and discordant pairs for two variables — get_concordant_discordant_pairs","text":"","code":"mtcars$id <- seq.int(nrow(mtcars)) get_concordant_discordant_pairs(mtcars, x = vs, y = am) #> # A tibble: 4 × 3 #>   pairs     n type                        #>   <chr> <int> <chr>                       #> 1 a         7 concordant: vs = 1 & am = 1 #> 2 b         7 discordant: vs = 1 & am = 0 #> 3 c         6 discordant: vs = 0 & am = 1 #> 4 d        12 concordant: vs = 0 & am = 0"},{"path":"https://joe-chelladurai.github.io/uxr/reference/get_confidence_intervals_event.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Confidence Intervals for Event Rate — get_confidence_intervals_event","title":"Get Confidence Intervals for Event Rate — get_confidence_intervals_event","text":"Get Confidence Intervals Event Rate","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/get_confidence_intervals_event.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Confidence Intervals for Event Rate — get_confidence_intervals_event","text":"","code":"get_confidence_intervals_event(event, total, confidence_level)"},{"path":"https://joe-chelladurai.github.io/uxr/reference/get_confidence_intervals_event.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Confidence Intervals for Event Rate — get_confidence_intervals_event","text":"event event total total confidence_level confidence level z value","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/get_confidence_intervals_event.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Confidence Intervals for Event Rate — get_confidence_intervals_event","text":"lower_ci, upper_ci","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/get_confidence_intervals_event.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Confidence Intervals for Event Rate — get_confidence_intervals_event","text":"","code":"get_confidence_intervals_event(event = 80,                                total = 100,                                confidence_level = 1.96) #> $lower_ci #> [1] 0.7104394 #>  #> $upper_ci #> [1] 0.8673637 #>"},{"path":"https://joe-chelladurai.github.io/uxr/reference/get_confidence_intervals_within_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Confidence Intervals Within Groups — get_confidence_intervals_within_groups","title":"Get Confidence Intervals Within Groups — get_confidence_intervals_within_groups","text":"Get Confidence Intervals Within Groups","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/get_confidence_intervals_within_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Confidence Intervals Within Groups — get_confidence_intervals_within_groups","text":"","code":"get_confidence_intervals_within_groups(data, x, y, conf_level = 0.95)"},{"path":"https://joe-chelladurai.github.io/uxr/reference/get_confidence_intervals_within_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Confidence Intervals Within Groups — get_confidence_intervals_within_groups","text":"data data x var 1 y var 2 conf_level Confidence level","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/get_confidence_intervals_within_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Confidence Intervals Within Groups — get_confidence_intervals_within_groups","text":"results","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/get_confidence_intervals_within_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Confidence Intervals Within Groups — get_confidence_intervals_within_groups","text":"","code":"A <- c(1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1) B <- c(0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0) data <- data.frame(A, B) get_confidence_intervals_within_groups(data, A, B) #>       lower_ci  upper_ci #> 1 0.0005694156 0.5904217"},{"path":"https://joe-chelladurai.github.io/uxr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://joe-chelladurai.github.io/uxr/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/sample_xy.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample XY - Example Dataset — sample_xy","title":"Sample XY - Example Dataset — sample_xy","text":"Example data two variables uniform distribution","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/sample_xy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample XY - Example Dataset — sample_xy","text":"","code":"sample_xy"},{"path":[]},{"path":"https://joe-chelladurai.github.io/uxr/reference/sample_xy.html","id":"sample-xy","dir":"Reference","previous_headings":"","what":"sample_xy","title":"Sample XY - Example Dataset — sample_xy","text":"data frame 100 rows 2 columns: x Column x y Column y","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/stat_mean_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean Confidence Intervals — stat_mean_ci","title":"Mean Confidence Intervals — stat_mean_ci","text":"Mean Confidence Intervals","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/stat_mean_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean Confidence Intervals — stat_mean_ci","text":"","code":"stat_mean_ci(x, alpha)"},{"path":"https://joe-chelladurai.github.io/uxr/reference/stat_mean_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean Confidence Intervals — stat_mean_ci","text":"x values alpha alpha","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/stat_mean_ci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean Confidence Intervals — stat_mean_ci","text":"lower_ci, upper_ci","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/stat_mean_ci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mean Confidence Intervals — stat_mean_ci","text":"","code":"stat_mean_ci(c(1, 2, 3, 4, 5, 6, 7), 1.96) #> $lower_ci #> [1] 7 #>  #> $upper_ci #> [1] 2 #>  stat_mean_ci(c(2, 4, 6, 8), 1.96) #> $lower_ci #> [1] 13 #>  #> $upper_ci #> [1] 2 #>"},{"path":"https://joe-chelladurai.github.io/uxr/reference/stat_mean_ci_2.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean Confidence Intervals (Large Samples) — stat_mean_ci_2","title":"Mean Confidence Intervals (Large Samples) — stat_mean_ci_2","text":"Mean Confidence Intervals (Large Samples)","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/stat_mean_ci_2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean Confidence Intervals (Large Samples) — stat_mean_ci_2","text":"","code":"stat_mean_ci_2(x, z)"},{"path":"https://joe-chelladurai.github.io/uxr/reference/stat_mean_ci_2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean Confidence Intervals (Large Samples) — stat_mean_ci_2","text":"x values z z value","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/stat_mean_ci_2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean Confidence Intervals (Large Samples) — stat_mean_ci_2","text":"lower_ci, upper_ci","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/stat_mean_ci_2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mean Confidence Intervals (Large Samples) — stat_mean_ci_2","text":"","code":"stat_mean_ci_2(c(1, 2, 3, 4, 5, 6, 7), 1.96) #> $lower_ci #> [1] 1 #>  #> $median #> [1] 4 #>  #> $upper_ci #> [1] 7 #>  stat_mean_ci_2(c(2, 4, 6, 8), 1.96) #> $lower_ci #> [1] 2 #>  #> $median #> [1] 5 #>  #> $upper_ci #> [1] 8 #>"},{"path":"https://joe-chelladurai.github.io/uxr/reference/table_observed_expected.html","id":null,"dir":"Reference","previous_headings":"","what":"Observed Expected Table — table_observed_expected","title":"Observed Expected Table — table_observed_expected","text":"Observed Expected Table","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/table_observed_expected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Observed Expected Table — table_observed_expected","text":"","code":"table_observed_expected(data, x, y)"},{"path":"https://joe-chelladurai.github.io/uxr/reference/table_observed_expected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Observed Expected Table — table_observed_expected","text":"data data x x y y","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/table_observed_expected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Observed Expected Table — table_observed_expected","text":"results","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_chisq_one.html","id":null,"dir":"Reference","previous_headings":"","what":"Chi-squared One Sample — test_chisq_one","title":"Chi-squared One Sample — test_chisq_one","text":"Chi-squared One Sample","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_chisq_one.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chi-squared One Sample — test_chisq_one","text":"","code":"test_chisq_one(data, x)"},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_chisq_one.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chi-squared One Sample — test_chisq_one","text":"data data x x","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_chisq_one.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chi-squared One Sample — test_chisq_one","text":"results","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_chisq_one.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chi-squared One Sample — test_chisq_one","text":"","code":"data <- tibble::tribble(~fruit, ~count,                         \"Apple\"          , 29,                         \"Banana\"         , 24,                         \"Cucumber\"       , 22,                         \"Dragon Fruit\"   , 19                         )  data <- data |>   tidyr::uncount(weights = count) |>   tibble::rowid_to_column(\"id\")  test_chisq_one(data, fruit) #> # A tibble: 1 × 1 #>   chi_sq #>    <dbl> #> 1   2.26"},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_chisq_two.html","id":null,"dir":"Reference","previous_headings":"","what":"Chi-squared Two Sample — test_chisq_two","title":"Chi-squared Two Sample — test_chisq_two","text":"Chi-squared Two Sample","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_chisq_two.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chi-squared Two Sample — test_chisq_two","text":"","code":"test_chisq_two(data, x, y)"},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_chisq_two.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chi-squared Two Sample — test_chisq_two","text":"data data x x y y","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_chisq_two.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chi-squared Two Sample — test_chisq_two","text":"results","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_chisq_two.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chi-squared Two Sample — test_chisq_two","text":"","code":"data <- tibble::tribble(~fruit, ~count,                         \"Apple\"          , 29,                         \"Banana\"         , 24,                         \"Cucumber\"       , 22,                         \"Dragon Fruit\"   , 19                         )  data <- data |>   tidyr::uncount(weights = count) |>   tibble::rowid_to_column(\"id\")  test_chisq_one(data, fruit) #> # A tibble: 1 × 1 #>   chi_sq #>    <dbl> #> 1   2.26"},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_fisher.html","id":null,"dir":"Reference","previous_headings":"","what":"Fisher's Test — test_fisher","title":"Fisher's Test — test_fisher","text":"Fisher's Test","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_fisher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fisher's Test — test_fisher","text":"","code":"test_fisher(data, x, y)"},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_fisher.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fisher's Test — test_fisher","text":"data data x x y y","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_fisher.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fisher's Test — test_fisher","text":"results","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_fisher.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fisher's Test — test_fisher","text":"","code":"design = c(\"A\",\"B\") complete = c(11, 5) incomplete = c(1, 5) data <- data.frame(design, complete, incomplete) data <- data |> tidyr::pivot_longer(!design, names_to = \"rate\", values_to = \"n\") |>   tidyr::uncount(n) test_fisher(data, design, rate) #> # A tibble: 1 × 2 #>   p_value odds_ratio #>     <dbl>      <dbl> #> 1  0.0557       9.76"},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_mcnemar.html","id":null,"dir":"Reference","previous_headings":"","what":"McNemar Test — test_mcnemar","title":"McNemar Test — test_mcnemar","text":"McNemar Test","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_mcnemar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"McNemar Test — test_mcnemar","text":"","code":"test_mcnemar(data, x, y)"},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_mcnemar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"McNemar Test — test_mcnemar","text":"data data x var 1 y var 2","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_mcnemar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"McNemar Test — test_mcnemar","text":"results","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_mcnemar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"McNemar Test — test_mcnemar","text":"","code":"A <- c(1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1) B <- c(0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0) data <- data.frame(A, B) test_mcnemar(data, A, B) #> [1] 0.125"},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_n_1_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"N-1 Two Proportions Test — test_n_1_prop","title":"N-1 Two Proportions Test — test_n_1_prop","text":"N-1 Two Proportions Test","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_n_1_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"N-1 Two Proportions Test — test_n_1_prop","text":"","code":"test_n_1_prop(data, x, y, conf_level = 0.95)"},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_n_1_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"N-1 Two Proportions Test — test_n_1_prop","text":"data data x x y y conf_level Confidence Level (default = 0.95)","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_n_1_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"N-1 Two Proportions Test — test_n_1_prop","text":"results","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_n_1_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"N-1 Two Proportions Test — test_n_1_prop","text":"","code":"design = c(\"A\",\"B\") complete = c(37, 22) incomplete = c(418, 416) data <- data.frame(design, complete, incomplete) data <- data |> tidyr::pivot_longer(!design, names_to = \"rate\", values_to = \"n\") |>   tidyr::uncount(n) test_n_1_prop(data, design, rate, conf_level = 0.95) #> # A tibble: 1 × 11 #>        a     b      c       d    den    num     z p_value     n lower_ci upper…¹ #>    <dbl> <dbl>  <dbl>   <dbl>  <dbl>  <dbl> <dbl>   <dbl> <int>    <dbl>   <dbl> #> 1 0.0311 0.999 0.0617 0.00448 0.0166 0.0311  1.87  0.0617   893 -0.00186  0.0636 #> # … with abbreviated variable name ¹​upper_ci"},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_n_1_two_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"N-1 Two Proportions Test — test_n_1_two_prop","title":"N-1 Two Proportions Test — test_n_1_two_prop","text":"N-1 Two Proportions Test","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_n_1_two_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"N-1 Two Proportions Test — test_n_1_two_prop","text":"","code":"test_n_1_two_prop(data, x, y, value, z)"},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_n_1_two_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"N-1 Two Proportions Test — test_n_1_two_prop","text":"data data x x y y value value z z","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_n_1_two_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"N-1 Two Proportions Test — test_n_1_two_prop","text":"results","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_t.html","id":null,"dir":"Reference","previous_headings":"","what":"T-test — test_t","title":"T-test — test_t","text":"T-test","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_t.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"T-test — test_t","text":"","code":"test_t(x, y, ...)"},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_t.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"T-test — test_t","text":"x x y y ... arguments passed t-test","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_t.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"T-test — test_t","text":"results","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_t.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"T-test — test_t","text":"","code":"test_t(mtcars$mpg, mtcars$am) #>  #> ── Welch Two Sample t-test ───────────────────────────────────────────────────── #>   X.         result.estimate   #>   mpg               20.09062   #>   am                 0.40625   #>   t                    18.41   #>   p                   <0.001   #>   df                      31   #>   ci_level              0.95   #>   lower_ci             17.51   #>   upper_ci             21.86"},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_t_paired.html","id":null,"dir":"Reference","previous_headings":"","what":"Paired t-test — test_t_paired","title":"Paired t-test — test_t_paired","text":"Paired t-test","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_t_paired.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paired t-test — test_t_paired","text":"","code":"test_t_paired(x, y, ...)"},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_t_paired.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paired t-test — test_t_paired","text":"x x y y ... arguments passed paired t-test","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_t_paired.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Paired t-test — test_t_paired","text":"results","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_wald.html","id":null,"dir":"Reference","previous_headings":"","what":"Wald Confidence Intervals — test_wald","title":"Wald Confidence Intervals — test_wald","text":"Wald Confidence Intervals","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_wald.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wald Confidence Intervals — test_wald","text":"","code":"test_wald(success, total, conf_level = 0.95)"},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_wald.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wald Confidence Intervals — test_wald","text":"success success total total conf_level conf_level (default: 0.95)","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_wald.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wald Confidence Intervals — test_wald","text":"lower_ci, upper_ci","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_wald.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wald Confidence Intervals — test_wald","text":"","code":"test_wald(10, 12, 0.95) #> $lower_ci #> [1] 0.6224748 #>  #> $upper_ci #> [1] 1.044192 #>  test_wald(5, 7, 0.95) #> $lower_ci #> [1] 0.3796279 #>  #> $upper_ci #> [1] 1.048944 #>"},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_wald_adj.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjusted Wald Confidence Intervals — test_wald_adj","title":"Adjusted Wald Confidence Intervals — test_wald_adj","text":"Adjusted Wald Confidence Intervals","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_wald_adj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjusted Wald Confidence Intervals — test_wald_adj","text":"","code":"test_wald_adj(success, total, conf_level = 0.95)"},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_wald_adj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjusted Wald Confidence Intervals — test_wald_adj","text":"success success total total conf_level conf_level (default: 0.95)","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_wald_adj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjusted Wald Confidence Intervals — test_wald_adj","text":"lower_ci, upper_ci","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/test_wald_adj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjusted Wald Confidence Intervals — test_wald_adj","text":"","code":"test_wald_adj(10, 12, 0.95) #> $lower_ci #> [1] 0.5405111 #>  #> $upper_ci #> [1] 0.9644929 #>  test_wald_adj(5, 7, 0.95) #> $lower_ci #> [1] 0.3533807 #>  #> $upper_ci #> [1] 0.9233348 #>"},{"path":"https://joe-chelladurai.github.io/uxr/reference/uxr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"uxr: User Experience Research — uxr-package","title":"uxr: User Experience Research — uxr-package","text":"Provides convenience functions user experience research emphasis quantitative user experience testing reporting. functions designed translate statistical approaches applied user experience research.","code":""},{"path":"https://joe-chelladurai.github.io/uxr/reference/uxr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"uxr: User Experience Research — uxr-package","text":"Maintainer: Joe Chelladurai joe.chelladurai@outlook.com (ORCID)","code":""},{"path":"https://joe-chelladurai.github.io/uxr/release-notes.html","id":"release-notes","dir":"","previous_headings":"","what":"Release Notes","title":"NA","text":"Added task_times_benchmark","code":""}]
